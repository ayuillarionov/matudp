function [bus, valid, offset] = deserializeBus_ContinuousDataBus(input, offset, valid)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   writeDeserializeBusCode('ContinuousDataBus')

    in = typecast(input, 'uint8');
    if nargin < 2
         offset = uint32(1);
    end
    if nargin < 3
         valid = uint8(1);
    end
    offset = uint32(offset);

    bus = initializeBus_ContinuousDataBus();
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing variable-sized field continuousTimeOffsets
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(31 - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_continuousTimeOffsets = uint8([3, 2, typecast(uint16(21), 'uint8'), 'continuousTimeOffsets', typecast(uint16(2), 'uint8'), 'ms', 1, 1])';
    for headerOffset = 1:uint32(31-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_continuousTimeOffsets(headerOffset));
    end
    offset = offset + uint32(31);

    % Establishing size
    coder.varsize('bus.continuousTimeOffsets', 60);
    if valid == uint8(0) || offset + uint32(2 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.continuousTimeOffsets = zeros([60 1], 'single');
    else
        sz = typecast(in(offset:(offset+uint32(2-1))), 'uint16')';
        offset = offset + uint32(2);
        % check size
        if sz(1) > uint16(60), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:1
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*4 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.continuousTimeOffsets = zeros([0 1], 'single');
        else
            % mollify codegen
            assert(sz(1) <= uint16(60));
            % read and typecast data
            assert(elements <= uint32(60));
            bus.continuousTimeOffsets = zeros([sz uint16(1)], 'single');
            if elements > uint32(0)
                bus.continuousTimeOffsets(1:elements) = typecast(in(offset:offset+uint32(elements*4 - 1))', 'single')';
                offset = offset + uint32(elements*4);
            end
        end
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Deserializing variable-sized field continuousData
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Checking header
    if valid == uint8(0) || offset + uint32(22 - 1) > numel(in)
        valid = uint8(0);
    end
    expectedHeader_continuousData = uint8([3, 5, typecast(uint16(14), 'uint8'), 'continuousData', typecast(uint16(0), 'uint8'), '', 0, 2])';
    for headerOffset = 1:uint32(22-1)
        valid = uint8(valid && in(offset+headerOffset-1) == expectedHeader_continuousData(headerOffset));
    end
    offset = offset + uint32(22);

    % Establishing size
    coder.varsize('bus.continuousData', [128 60]);
    if valid == uint8(0) || offset + uint32(4 - 1) > numel(in)
        % buffer not large enough for header
        valid = uint8(0);
        bus.continuousData = zeros([128 60], 'double');
    else
        sz = typecast(in(offset:(offset+uint32(4-1))), 'uint16')';
        offset = offset + uint32(4);
        % check size
        if sz(1) > uint16(128), valid = uint8(0); end
        if sz(2) > uint16(60), valid = uint8(0); end
        elements = uint32(1);
        for i = 1:2
             elements = elements * uint32(sz(i));
        end
        if elements > uint32(0) && offset + uint32(elements*8 - 1) > numel(in)
            % buffer not large enough for data
            valid = uint8(0);
        end
        if valid && elements == uint32(0)
            % assigning empty value
            bus.continuousData = zeros([0 0], 'double');
        else
            % mollify codegen
            assert(sz(1) <= uint16(128));
            assert(sz(2) <= uint16(60));
            % read and typecast data
            assert(elements <= uint32(7680));
            bus.continuousData = zeros(sz, 'double');
            if elements > uint32(0)
                bus.continuousData(1:elements) = typecast(in(offset:offset+uint32(elements*8 - 1))', 'double')';
                offset = offset + uint32(elements*8);
            end
        end
    end


end