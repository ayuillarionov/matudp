function writeGetSerializedBusLengthCode(busName)
% writes an m-file getSerializedBusLength_*BusName* which can compute the
% number of bytes needed to serialize bus busName to a uint8 bytestream
% reflecting the current sizes of variable-sized contents

    % write to temp file, copy later if files differ
    fnName = sprintf('getSerializedBusLength_%s', busName);
    fileName = BusSerialize.getGeneratedCodeFileName(fnName);
    temp = tempname();
    fid = fopen(temp, 'w+');
    
    [busObject, busSpec] = BusSerialize.getBusFromBusName(busName);
    if isempty(busObject)
        error('Bus %s not found', busName);
    end
    elements = busObject.Elements;
    
    w = @(varargin) BusSerialize.writeReplaceNewline(fid, varargin{:});
    
    w('function outSize = %s(bus, namePrefix)\n', fnName);
    w('%%#codegen\n');
    w('%% DO NOT EDIT: Auto-generated by \n');
    w('%%   BusSerialize.writeGetSerializedBusLengthCode(''%s'')\n', busName);
    w('\n');
    w('    if nargin < 2, namePrefix = uint8(''''); end\n');
    w('    namePrefixBytes = uint8(namePrefix(:))'';\n');
    
    % first, compute the size needed for the output buffer by going over
    % everything once
    w('    outSize = uint32(0);\n');
    for i = 1:numel(elements)
        e = elements(i);
        signalSpec = busSpec.signals(i);
        dims = e.Dimensions;
        numElements = prod(dims);
        nd = numel(dims);

        w('    %% element %s\n', e.Name);
        
        % check for nested bus
        isBus = strncmp(e.DataType, 'Bus:', 4);
        if isBus
            % handle nested bus case
            innerBusName = BusSerialize.parseBusDataTypeStr(e.DataType);
            % defer to this bus's getSerializedBusLength fn
            lenFnName = BusSerialize.getGeneratedCodeFunctionName(sprintf('getSerializedBusLength_%s', innerBusName));
            if numElements == 1
                w('    outSize = outSize + uint32(%s(bus.%s(1), uint8([namePrefix ''_%s'']))); %% for %s nested bus\n', lenFnName, e.Name, e.Name, e.Name);
            else
                for iElement = 1:numElements
                    w('    outSize = outSize + uint32(%s(bus.%s(%d), uint8([namePrefix ''_%s%d'']))); %% for %s nested bus\n', lenFnName, e.Name, iElement, e.Name, iElement, e.Name);
                end
            end
        else
            % not a nested bus
            
            % bit flags
            w('    outSize = outSize + uint32(1); %% bit flags\n');
            % signal type
            w('    outSize = outSize + uint32(1); %% signal type\n');
            % name
            w('    outSize = outSize + uint32(2 + numel(namePrefixBytes) + %d); %% for name (including prefix)\n', numel(e.Name));
            % units
            w('    outSize = outSize + uint32(2 + %d); %% for units\n', numel(e.DocUnits));
            % data type id
            w('    outSize = outSize + uint32(1); %% for data type id\n');
            %  size
            w('    outSize = outSize + uint32(1 + 2*%d); %% for dimensions\n', nd);
        
            if signalSpec.isEnum
                w('    for iEl = 1:numel(bus.%s)\n', e.Name);
                enumFnName = BusSerialize.getGeneratedCodeFunctionName(sprintf('enumToString_%s', signalSpec.enumName));
                w('        outSize = outSize + uint32(numel(%s(bus.%s(iEl)))); %% for %s enum to string\n', enumFnName, e.Name, e.Name);
                w('    end\n');
                w('    outSize = outSize + uint32(numel(bus.%s)-1); % for semicolon delimiters\n', e.Name);
            
            else
                bytesPerElement = numel(typecast(cast(1, e.DataType), 'uint8'));

                % add the size of the data to the total size
                w('    outSize = outSize + uint32(%d * ', bytesPerElement);
                if nd == 1
                    w('numel(bus.%s)', e.Name);
                else
                    for d = 1:nd
                        w('size(bus.%s, %d)', e.Name, d);
                        if d < nd
                            w(' * ');
                        end
                    end
                end
                w('); %% for %s data \n', e.Name);
            end
        end
        w('\n');
    end
    
    w('\n');
    w('end');
    
    fclose(fid);
    
    % copy now if files differed
    update = BusSerialize.overwriteIfFilesDiffer(temp, fileName);
    delete(temp);
    if update
        fprintf('BusSerialize: Updating %s\n', fnName);
    end
end
