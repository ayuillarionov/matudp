function writeStringToEnumCode(enumName)
% writes an m-file enumToString_EnumName which will convert an enum member
% as a variable length uint8 string (or as a char) to the
% Simulink enum value (underlying int32 type) 
% the string name of the enum. This file will  be located in the +sysNameLib
% package.

    fnName = sprintf('stringToEnum_%s', enumName);
    fileName = BusSerialize.getGeneratedCodeFileName(fnName);
    temp = tempname();
    fid = fopen(temp, 'w+');
    
    w = @(varargin) BusSerialize.writeReplaceNewline(fid, varargin{:});
   
    % get enumeration members from metaclass
    mc = meta.class.fromName(enumName);
    members = {mc.EnumerationMemberList.Name};
   
    w('function [enumValue, valid] = %s(str)\n', fnName);
    w('%%#codegen\n');
    w('%% DO NOT EDIT: Auto-generated by \n');
    w('%%   BusSerialize.writeEnumToStringCode(''%s'')\n', enumName);
    w('\n');
    
    w('    valid = uint8(1);\n');
    
    % add a case for each member
    for i = 1:numel(members)
        if i == 1
            ifStr = 'if';
        else
            ifStr = 'elseif';
        end
        w('    %s isequal(uint8(str(:)), uint8(''%s'')'')\n', ifStr, members{i});
        w('        enumValue = %s.%s;\n', enumName, members{i});
    end
    
    % add default value
    defValue = char(eval([enumName '.getDefaultValue()']));
    w('    else\n');
    w('        enumValue = %s.%s;\n', enumName, defValue);
    w('        valid = uint8(0);\n');
    w('    end\n');
    
    w('end');
    
    fclose(fid);
    
    % copy now if files differed
    update = BusSerialize.overwriteIfFilesDiffer(temp, fileName);
    delete(temp);
    if update
        fprintf('BusSerialize: Updating %s\n', fnName);
    end
end
