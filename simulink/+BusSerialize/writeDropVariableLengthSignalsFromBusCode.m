function writeDropVariableLengthSignalsFromBusCode(busName, busNameFixed)
% writes an m-file initializeBus_*BusName* which can initialize a zeroed or
% empty bus for the purposes of code generation

    % write to temp file, copy later if files differ
    fnName = sprintf('dropVariableLengthSignalsFromBus_%s', busName);
    fileName = BusSerialize.getGeneratedCodeFileName(fnName);
    temp = tempname();
    fid = fopen(temp, 'w+');
    
    [busObject, busSpec] = BusSerialize.getBusFromBusName(busName);
    elements = busObject.Elements;
    
    w = @(varargin) BusSerialize.writeReplaceNewline(fid, varargin{:});
    
    w('function busFixed = %s(bus)\n', fnName);
    w('%%#codegen\n');
    w('%% DO NOT EDIT: Auto-generated by \n');
    w('%%   writeDropVariableLengthSignalsFromBusCode(''%s'', ''%s'')\n', busName, busNameFixed);
    w('\n');
    
    for iElement = 1:numel(elements)
        e = elements(iElement);
        signalSpec = busSpec.signals(iElement);

        if ~signalSpec.isVariable
            w('    busFixed.%s = bus.%s;\n', e.Name, e.Name);
        end
    end
        
    w('\n');
    w('end');
    
    fclose(fid);
    
    % copy now if files differed
    update = BusSerialize.overwriteIfFilesDiffer(temp, fileName);
    delete(temp);
    if update
        fprintf('BusSerialize: Updating %s\n', fnName);
    end
end
