function writeSemicolonDelimitedStringToEnumVectorCode(enumName)
% writes an m-file enumToString_EnumName which will convert an enum member
% as a variable length uint8 string (or as a char) to the
% Simulink enum value (underlying int32 type) 
% the string name of the enum. This file will  be located in the +sysNameLib
% package.

    fnName = sprintf('semicolonDelimitedStringToEnumVector_%s', enumName);
    fileName = BusSerialize.getGeneratedCodeFileName(fnName);
    temp = tempname();
    fid = fopen(temp, 'w+');
    
    w = @(varargin) BusSerialize.writeReplaceNewline(fid, varargin{:});
   
    % get enumeration members from metaclass
    mc = meta.class.fromName(enumName);
    members = {mc.EnumerationMemberList.Name};
   
    w('function [enumVector, nValues, valid] = %s(str, enumVector)\n', fnName);
    w('%%#codegen\n');
    w('%% DO NOT EDIT: Auto-generated by \n');
    w('%%   BusSerialize.writeSemicolonDelimitedStringToEnumVectorCode(''%s'')\n', enumName);
    w('\n');
    
    w('    valid = uint8(1);\n');
    w('    nValues = uint32(0);\n');
    
    w('    coder.varsize(''token'', %d);\n', BusSerialize.getEnumMaxLengthAsString(enumName));
    
    w('    if nargin < 2\n');
    w('        maxValues = Inf; %% for matlab use only\n');
    w('        enumVector = %s.empty(0, 1);\n', enumName);
    w('    else\n'); 
    w('        maxValues = numel(enumVector); %% for simulink codegen use, required to avoid undetermined max size issue\n');
    w('    end\n');
    w('\n');

    % loop over tokens looking for semicolons
    w('    counter = 1;\n');
    w('    idx1 = 1;\n');
    w('    while(idx1 <= numel(str))\n');
    w('        idx2 = idx1+1;\n');
    w('        while(idx2 <= numel(str))\n');
    w('            if str(idx2) == '';''\n');
    w('                break;\n');
    w('            end\n');
    w('            idx2 = idx2 + 1;\n');
    w('        end\n');
    w('\n');
    
    % token is str(idx1:idx2-1)
    w('    if idx2-idx1 > %d\n', BusSerialize.getEnumMaxLengthAsString(enumName));
    w('        valid = uint8(0);\n');
    w('        return;\n');
    w('    end\n');
    w('    token = str(idx1:idx2-1);\n');
    
    % add a case for each member
    for i = 1:numel(members)
        if i == 1
            ifStr = 'if';
        else
            ifStr = 'elseif';
        end
        w('        %s isequal(uint8(token(:)), uint8(''%s'')'')\n', ifStr, members{i});
        w('            enumVector(counter) = %s.%s;\n', enumName, members{i});
    end
    
    % add default value
%     defValue = char(eval([enumName '.getDefaultValue()']));
    w('        else\n');
    %w('        enumValue = %s.%s;\n', enumName, defValue);
    w('            valid = uint8(0);\n');
    w('            return;\n');
    w('        end\n');
    
    w('        counter = counter + 1;\n');
    w('        if counter > maxValues\n');
    w('            nValues = uint32(counter - 1);\n');
    w('            return;\n');
    w('        end\n');
    w('        idx1 = idx2 + 1;\n');
    w('    end\n');
    w('    nValues = uint32(counter - 1);\n');
    w('\n');
    w('end');
    
    
    
    fclose(fid);
    
    % copy now if files differed
    update = BusSerialize.overwriteIfFilesDiffer(temp, fileName);
    delete(temp);
    if update
        fprintf('BusSerialize: Updating %s\n', fnName);
    end
end
