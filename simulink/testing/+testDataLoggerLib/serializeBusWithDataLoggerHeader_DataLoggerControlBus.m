function [out, valid] = serializeBusWithDataLoggerHeader_DataLoggerControlBus(bus, groupType, groupName, timestamp)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSerializeBusModelPackagedCode('testDataLogger', 'DataLoggerControlBus')

    valid = uint8(0);
    headerLength = uint16(BusSerialize.computeDataLoggerHeaderLength(groupName));
    coder.varsize('out', 232 + headerLength);
    outSize = headerLength + testDataLoggerLib.getSerializedBusLength_DataLoggerControlBus(bus);
    out = zeros(outSize, 1, 'uint8');
    offset = uint16(1);

    % Serialize data logger header
    header = BusSerialize.serializeDataLoggerHeader(groupType, groupName, uint32(4079919573), uint16(6), timestamp);
    out(1:headerLength) = uint8(header);
    offset = offset + headerLength;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize variable-sized dataStore
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % dataStore bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);

    % dataStore signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % dataStore concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % dataStore bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(1);

    % dataStore name
    if(offset+uint16(2+9 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(9), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(9-1))) = uint8('dataStore');
    offset = offset + uint16(9);

    % dataStore units
    if(offset+uint16(2+4 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(4), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(4-1))) = uint8('char');
    offset = offset + uint16(4);

    % dataStore data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(8); % data type is char
    offset = offset + uint16(1);

    % dataStore dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.dataStore)), 'uint8');
    offset = offset + uint16(2*1);

    % dataStore data
    nBytes = uint16(1 * numel(bus.dataStore));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.dataStore) || islogical(bus.dataStore)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.dataStore(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.dataStore(:), 'uint8');
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize variable-sized subject
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % subject bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);

    % subject signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % subject concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % subject bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(1);

    % subject name
    if(offset+uint16(2+7 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(7), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(7-1))) = uint8('subject');
    offset = offset + uint16(7);

    % subject units
    if(offset+uint16(2+4 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(4), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(4-1))) = uint8('char');
    offset = offset + uint16(4);

    % subject data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(8); % data type is char
    offset = offset + uint16(1);

    % subject dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.subject)), 'uint8');
    offset = offset + uint16(2*1);

    % subject data
    nBytes = uint16(1 * numel(bus.subject));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.subject) || islogical(bus.subject)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.subject(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.subject(:), 'uint8');
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize variable-sized protocol
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % protocol bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);

    % protocol signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % protocol concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % protocol bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(1);

    % protocol name
    if(offset+uint16(2+8 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(8), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(8-1))) = uint8('protocol');
    offset = offset + uint16(8);

    % protocol units
    if(offset+uint16(2+4 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(4), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(4-1))) = uint8('char');
    offset = offset + uint16(4);

    % protocol data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(8); % data type is char
    offset = offset + uint16(1);

    % protocol dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.protocol)), 'uint8');
    offset = offset + uint16(2*1);

    % protocol data
    nBytes = uint16(1 * numel(bus.protocol));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.protocol) || islogical(bus.protocol)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.protocol(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.protocol(:), 'uint8');
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized protocolVersion
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % protocolVersion bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % protocolVersion signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % protocolVersion concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % protocolVersion bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);

    % protocolVersion name
    if(offset+uint16(2+15 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(15), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(15-1))) = uint8('protocolVersion');
    offset = offset + uint16(15);

    % protocolVersion units
    if(offset+uint16(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint16(2);

    % protocolVersion data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(7); % data type is uint32
    offset = offset + uint16(1);

    % protocolVersion dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.protocolVersion)), 'uint8');
    offset = offset + uint16(2*1);

    % protocolVersion data
    nBytes = uint16(4 * numel(bus.protocolVersion));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.protocolVersion) || islogical(bus.protocolVersion)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.protocolVersion(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.protocolVersion(:), 'uint8');
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized saveTag
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % saveTag bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % saveTag signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % saveTag concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % saveTag bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);

    % saveTag name
    if(offset+uint16(2+7 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(7), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(7-1))) = uint8('saveTag');
    offset = offset + uint16(7);

    % saveTag units
    if(offset+uint16(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint16(2);

    % saveTag data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(7); % data type is uint32
    offset = offset + uint16(1);

    % saveTag dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.saveTag)), 'uint8');
    offset = offset + uint16(2*1);

    % saveTag data
    nBytes = uint16(4 * numel(bus.saveTag));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.saveTag) || islogical(bus.saveTag)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.saveTag(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.saveTag(:), 'uint8');
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized nextTrial
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % nextTrial bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % nextTrial signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % nextTrial concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % nextTrial bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);

    % nextTrial name
    if(offset+uint16(2+9 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(9), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(9-1))) = uint8('nextTrial');
    offset = offset + uint16(9);

    % nextTrial units
    if(offset+uint16(2+0 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(0), 'uint8');
    offset = offset + uint16(2);

    % nextTrial data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(3); % data type is uint8
    offset = offset + uint16(1);

    % nextTrial dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.nextTrial)), 'uint8');
    offset = offset + uint16(2*1);

    % nextTrial data
    nBytes = uint16(1 * numel(bus.nextTrial));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.nextTrial) || islogical(bus.nextTrial)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.nextTrial(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.nextTrial(:), 'uint8');
    end
    offset = offset + nBytes; %#ok<NASGU>

    valid = uint8(1);
end