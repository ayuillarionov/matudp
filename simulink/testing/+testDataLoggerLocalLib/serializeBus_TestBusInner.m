function [out, valid] = serializeBus_TestBusInner(bus)
%#codegen
% DO NOT EDIT: Auto-generated by 
%   BusSerialize.writeSerializeBusModelPackagedCode('testDataLoggerLocal', 'TestBusInner')

    valid = uint8(0);
    outSize = testDataLoggerLocalLib.getSerializedBusLength_TestBusInner(bus);
    out = zeros(outSize, 1, 'uint8');
    offset = uint16(1);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized centerSize
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % centerSize bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % centerSize signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % centerSize concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % centerSize bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);

    % centerSize name
    if(offset+uint16(2+10 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(10), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(10-1))) = uint8('centerSize');
    offset = offset + uint16(10);

    % centerSize units
    if(offset+uint16(2+2 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(2), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(2-1))) = uint8('mm');
    offset = offset + uint16(2);

    % centerSize data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(3); % data type is uint8
    offset = offset + uint16(1);

    % centerSize dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.centerSize)), 'uint8');
    offset = offset + uint16(2*1);

    % centerSize data
    nBytes = uint16(1 * numel(bus.centerSize));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.centerSize) || islogical(bus.centerSize)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.centerSize(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.centerSize(:), 'uint8');
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized holdWindowCenter
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % holdWindowCenter bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % holdWindowCenter signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % holdWindowCenter concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % holdWindowCenter bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);

    % holdWindowCenter name
    if(offset+uint16(2+16 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(16), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(16-1))) = uint8('holdWindowCenter');
    offset = offset + uint16(16);

    % holdWindowCenter units
    if(offset+uint16(2+2 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(2), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(2-1))) = uint8('mm');
    offset = offset + uint16(2);

    % holdWindowCenter data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(3); % data type is uint8
    offset = offset + uint16(1);

    % holdWindowCenter dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.holdWindowCenter)), 'uint8');
    offset = offset + uint16(2*1);

    % holdWindowCenter data
    nBytes = uint16(1 * numel(bus.holdWindowCenter));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.holdWindowCenter) || islogical(bus.holdWindowCenter)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.holdWindowCenter(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.holdWindowCenter(:), 'uint8');
    end
    offset = offset + nBytes;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Serialize fixed-sized holdWindowTarget
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % holdWindowTarget bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % holdWindowTarget signal type
    if(offset > numel(out)), return, end
    out(offset) = uint8(4);
    offset = offset + uint16(1);

    % holdWindowTarget concatenation dimension
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);
    offset = offset + uint16(1);

    % holdWindowTarget bitFlags
    if(offset > numel(out)), return, end
    out(offset) = uint8(0);

    % holdWindowTarget name
    if(offset+uint16(2+16 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(16), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(16-1))) = uint8('holdWindowTarget');
    offset = offset + uint16(16);

    % holdWindowTarget units
    if(offset+uint16(2+2 -1) > numel(out)), return, end
    out(offset:(offset+uint16(1))) = typecast(uint16(2), 'uint8');
    offset = offset + uint16(2);
    out(offset:(offset+uint16(2-1))) = uint8('mm');
    offset = offset + uint16(2);

    % holdWindowTarget data type id
    if(offset > numel(out)), return, end
    out(offset) = uint8(5); % data type is uint16
    offset = offset + uint16(1);

    % holdWindowTarget dimensions
    if(offset > numel(out)), return, end
    if(offset+uint16(1+2*1-1) > numel(out)), return, end
    out(offset) = uint8(1);
    offset = offset + uint16(1);
    out(offset:(offset+uint16(2*1-1))) = typecast(uint16(numel(bus.holdWindowTarget)), 'uint8');
    offset = offset + uint16(2*1);

    % holdWindowTarget data
    nBytes = uint16(2 * numel(bus.holdWindowTarget));
    if(offset+uint16(nBytes-1) > numel(out)), return, end
    if ischar(bus.holdWindowTarget) || islogical(bus.holdWindowTarget)
        out(offset:(offset+uint16(nBytes-1))) = typecast(uint8(bus.holdWindowTarget(:)), 'uint8');
    else
        out(offset:(offset+uint16(nBytes-1))) = typecast(bus.holdWindowTarget(:), 'uint8');
    end
    offset = offset + nBytes; %#ok<NASGU>

    valid = uint8(1);
end